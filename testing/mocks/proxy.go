// Code generated by MockGen. DO NOT EDIT.
// Source: v2ray.com/core/proxy (interfaces: Inbound,Outbound)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	net "v2ray.com/core/common/net"
	vio "v2ray.com/core/common/vio"
	routing "v2ray.com/core/features/routing"
	internet "v2ray.com/core/transport/internet"
)

// MockProxyInbound is a mock of Inbound interface
type MockProxyInbound struct {
	ctrl     *gomock.Controller
	recorder *MockProxyInboundMockRecorder
}

// MockProxyInboundMockRecorder is the mock recorder for MockProxyInbound
type MockProxyInboundMockRecorder struct {
	mock *MockProxyInbound
}

// NewMockProxyInbound creates a new mock instance
func NewMockProxyInbound(ctrl *gomock.Controller) *MockProxyInbound {
	mock := &MockProxyInbound{ctrl: ctrl}
	mock.recorder = &MockProxyInboundMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProxyInbound) EXPECT() *MockProxyInboundMockRecorder {
	return m.recorder
}

// Network mocks base method
func (m *MockProxyInbound) Network() net.NetworkList {
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(net.NetworkList)
	return ret0
}

// Network indicates an expected call of Network
func (mr *MockProxyInboundMockRecorder) Network() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockProxyInbound)(nil).Network))
}

// Process mocks base method
func (m *MockProxyInbound) Process(arg0 context.Context, arg1 net.Network, arg2 internet.Connection, arg3 routing.Dispatcher) error {
	ret := m.ctrl.Call(m, "Process", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process
func (mr *MockProxyInboundMockRecorder) Process(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockProxyInbound)(nil).Process), arg0, arg1, arg2, arg3)
}

// MockProxyOutbound is a mock of Outbound interface
type MockProxyOutbound struct {
	ctrl     *gomock.Controller
	recorder *MockProxyOutboundMockRecorder
}

// MockProxyOutboundMockRecorder is the mock recorder for MockProxyOutbound
type MockProxyOutboundMockRecorder struct {
	mock *MockProxyOutbound
}

// NewMockProxyOutbound creates a new mock instance
func NewMockProxyOutbound(ctrl *gomock.Controller) *MockProxyOutbound {
	mock := &MockProxyOutbound{ctrl: ctrl}
	mock.recorder = &MockProxyOutboundMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProxyOutbound) EXPECT() *MockProxyOutboundMockRecorder {
	return m.recorder
}

// Process mocks base method
func (m *MockProxyOutbound) Process(arg0 context.Context, arg1 *vio.Link, arg2 internet.Dialer) error {
	ret := m.ctrl.Call(m, "Process", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process
func (mr *MockProxyOutboundMockRecorder) Process(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockProxyOutbound)(nil).Process), arg0, arg1, arg2)
}
