package internet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import v2ray_core_common_serial "v2ray.com/core/common/serial"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TransportProtocol int32

const (
	TransportProtocol_TCP       TransportProtocol = 0
	TransportProtocol_UDP       TransportProtocol = 1
	TransportProtocol_MKCP      TransportProtocol = 2
	TransportProtocol_WebSocket TransportProtocol = 3
)

var TransportProtocol_name = map[int32]string{
	0: "TCP",
	1: "UDP",
	2: "MKCP",
	3: "WebSocket",
}
var TransportProtocol_value = map[string]int32{
	"TCP":       0,
	"UDP":       1,
	"MKCP":      2,
	"WebSocket": 3,
}

func (x TransportProtocol) String() string {
	return proto.EnumName(TransportProtocol_name, int32(x))
}
func (TransportProtocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TransportConfig struct {
	// Type of network that this settings supports.
	Protocol TransportProtocol `protobuf:"varint,1,opt,name=protocol,enum=v2ray.core.transport.internet.TransportProtocol" json:"protocol,omitempty"`
	// Specific settings.
	Settings *v2ray_core_common_serial.TypedMessage `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
}

func (m *TransportConfig) Reset()                    { *m = TransportConfig{} }
func (m *TransportConfig) String() string            { return proto.CompactTextString(m) }
func (*TransportConfig) ProtoMessage()               {}
func (*TransportConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TransportConfig) GetProtocol() TransportProtocol {
	if m != nil {
		return m.Protocol
	}
	return TransportProtocol_TCP
}

func (m *TransportConfig) GetSettings() *v2ray_core_common_serial.TypedMessage {
	if m != nil {
		return m.Settings
	}
	return nil
}

type StreamConfig struct {
	// Effective network.
	Protocol          TransportProtocol  `protobuf:"varint,1,opt,name=protocol,enum=v2ray.core.transport.internet.TransportProtocol" json:"protocol,omitempty"`
	TransportSettings []*TransportConfig `protobuf:"bytes,2,rep,name=transport_settings,json=transportSettings" json:"transport_settings,omitempty"`
	// Type of security. Must be a message name of the settings proto.
	SecurityType     string                                   `protobuf:"bytes,3,opt,name=security_type,json=securityType" json:"security_type,omitempty"`
	SecuritySettings []*v2ray_core_common_serial.TypedMessage `protobuf:"bytes,4,rep,name=security_settings,json=securitySettings" json:"security_settings,omitempty"`
}

func (m *StreamConfig) Reset()                    { *m = StreamConfig{} }
func (m *StreamConfig) String() string            { return proto.CompactTextString(m) }
func (*StreamConfig) ProtoMessage()               {}
func (*StreamConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StreamConfig) GetProtocol() TransportProtocol {
	if m != nil {
		return m.Protocol
	}
	return TransportProtocol_TCP
}

func (m *StreamConfig) GetTransportSettings() []*TransportConfig {
	if m != nil {
		return m.TransportSettings
	}
	return nil
}

func (m *StreamConfig) GetSecurityType() string {
	if m != nil {
		return m.SecurityType
	}
	return ""
}

func (m *StreamConfig) GetSecuritySettings() []*v2ray_core_common_serial.TypedMessage {
	if m != nil {
		return m.SecuritySettings
	}
	return nil
}

type ProxyConfig struct {
	Tag string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
}

func (m *ProxyConfig) Reset()                    { *m = ProxyConfig{} }
func (m *ProxyConfig) String() string            { return proto.CompactTextString(m) }
func (*ProxyConfig) ProtoMessage()               {}
func (*ProxyConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProxyConfig) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func init() {
	proto.RegisterType((*TransportConfig)(nil), "v2ray.core.transport.internet.TransportConfig")
	proto.RegisterType((*StreamConfig)(nil), "v2ray.core.transport.internet.StreamConfig")
	proto.RegisterType((*ProxyConfig)(nil), "v2ray.core.transport.internet.ProxyConfig")
	proto.RegisterEnum("v2ray.core.transport.internet.TransportProtocol", TransportProtocol_name, TransportProtocol_value)
}

func init() { proto.RegisterFile("v2ray.com/core/transport/internet/config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x91, 0x4f, 0x4b, 0xfb, 0x30,
	0x18, 0xc7, 0x7f, 0x6d, 0xc7, 0xcf, 0xee, 0xd9, 0xa6, 0x5d, 0x4e, 0x43, 0x18, 0xce, 0x09, 0x52,
	0x3c, 0xa4, 0xa3, 0xde, 0x3d, 0xac, 0x5e, 0x44, 0x07, 0xa5, 0x9d, 0x0a, 0x82, 0x8c, 0x2e, 0xc6,
	0x52, 0x5c, 0x9b, 0x91, 0x46, 0xb1, 0xaf, 0xc7, 0x9b, 0x77, 0xdf, 0x9f, 0xf4, 0x4f, 0xc2, 0x50,
	0x18, 0xbb, 0x78, 0x0b, 0xcd, 0xf7, 0xf9, 0x3c, 0x9f, 0x7e, 0x03, 0xf8, 0xcd, 0xe5, 0x51, 0x81,
	0x09, 0x4b, 0x1d, 0xc2, 0x38, 0x75, 0x04, 0x8f, 0xb2, 0x7c, 0xcd, 0xb8, 0x70, 0x92, 0x4c, 0x50,
	0x9e, 0x51, 0xe1, 0x10, 0x96, 0x3d, 0x27, 0x31, 0x5e, 0x73, 0x26, 0x18, 0x1a, 0xca, 0x3c, 0xa7,
	0x58, 0x65, 0xb1, 0xcc, 0x1e, 0x4e, 0x7e, 0xe0, 0x08, 0x4b, 0x53, 0x96, 0x39, 0x39, 0xe5, 0x49,
	0xb4, 0x72, 0x44, 0xb1, 0xa6, 0x4f, 0x8b, 0x94, 0xe6, 0x79, 0x14, 0xd3, 0x1a, 0x38, 0xfe, 0xd0,
	0xe0, 0x60, 0x2e, 0x41, 0x5e, 0xb5, 0x0a, 0xdd, 0x80, 0x59, 0x5d, 0x12, 0xb6, 0x1a, 0x68, 0x23,
	0xcd, 0xde, 0x77, 0x27, 0x78, 0xeb, 0x5e, 0xac, 0x08, 0x7e, 0x33, 0x17, 0x28, 0x02, 0x9a, 0x82,
	0x99, 0x53, 0x21, 0x92, 0x2c, 0xce, 0x07, 0xfa, 0x48, 0xb3, 0x3b, 0xee, 0xe9, 0x26, 0xad, 0x56,
	0xc4, 0xb5, 0x22, 0x9e, 0x97, 0x8a, 0xb3, 0xda, 0x30, 0x50, 0x73, 0xe3, 0x2f, 0x1d, 0xba, 0xa1,
	0xe0, 0x34, 0x4a, 0xff, 0x44, 0xf1, 0x11, 0x90, 0x9a, 0x58, 0x6c, 0xc8, 0x1a, 0x76, 0xc7, 0xc5,
	0xbb, 0x72, 0x6b, 0xb3, 0xa0, 0xaf, 0x32, 0x61, 0x03, 0x42, 0x27, 0xd0, 0xcb, 0x29, 0x79, 0xe5,
	0x89, 0x28, 0x16, 0xe5, 0x1b, 0x0c, 0x8c, 0x91, 0x66, 0xb7, 0x83, 0xae, 0xfc, 0x58, 0xfe, 0x34,
	0x0a, 0xa1, 0xaf, 0x42, 0x4a, 0xa1, 0x55, 0x29, 0xec, 0xda, 0x97, 0x25, 0x01, 0x72, 0xf3, 0xf8,
	0x08, 0x3a, 0x3e, 0x67, 0xef, 0x45, 0xd3, 0x9a, 0x05, 0x86, 0x88, 0xe2, 0xaa, 0xb0, 0x76, 0x50,
	0x1e, 0xcf, 0x2e, 0xa0, 0xff, 0xab, 0x18, 0xb4, 0x07, 0xc6, 0xdc, 0xf3, 0xad, 0x7f, 0xe5, 0xe1,
	0xf6, 0xd2, 0xb7, 0x34, 0x64, 0x42, 0x6b, 0x76, 0xed, 0xf9, 0x96, 0x8e, 0x7a, 0xd0, 0xbe, 0xa7,
	0xcb, 0x90, 0x91, 0x17, 0x2a, 0x2c, 0x63, 0x3a, 0x83, 0x63, 0xc2, 0xd2, 0xed, 0x15, 0x3d, 0x98,
	0xf2, 0xf4, 0xa9, 0x0f, 0xef, 0xdc, 0x20, 0x2a, 0xb0, 0x57, 0x26, 0xd5, 0x62, 0x7c, 0xd5, 0xdc,
	0x2f, 0xff, 0x57, 0x4f, 0x72, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xc3, 0x2c, 0x5e, 0x17,
	0x03, 0x00, 0x00,
}
